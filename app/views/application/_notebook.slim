javascript:
  MathJax.Hub.Typeset();

-notebook ||= nil
-jn ||= notebook&.notebook
-all_health = notebook&.cell_health_status
-code_cells ||= notebook&.code_cells
-code_cell_number = 0
-require "will_paginate/array"
-if !defined? group_view
  -group_view = false
-if (params[:view] == nil || params[:view].strip != "full") && !group_view
  -cells = jn["cells"].paginate(page: @page, per_page: 20)
-else
  -cells = jn["cells"]

// Calculate what each page's code cell id and health should start at
ruby:
  page_cell_starts = [0]
  if (cells.respond_to? :total_pages)
    jn["cells"].each_with_index do |cell, index|
      if index % 20 == 0 && index != 0
        if cell["cell_type"] == "code" && !cell["source"].blank? && defined?(code_cells) && code_cells
          code_cell_number += 1
          page_cell_starts.push(code_cell_number)
        else
          page_cell_starts.push(code_cell_number)
        end
      elsif cell["cell_type"] == "code" && !cell["source"].blank? && defined?(code_cells) && code_cells
        code_cell_number += 1
      end
    end
  end
  code_cell_number = 0

// Designate starting code_cell_number based on page parameter
-if (cells.respond_to? :total_pages) && params[:page] && params[:page].present?
  -code_cell_number = page_cell_starts[params[:page].to_i - 1]

// Populate properly-linked code health icons
-cells.each do |cell|
  ruby:
    if cell["cell_type"] == "code" && !cell["source"].blank? && defined?(code_cells) && code_cells
      code_cell = code_cells[code_cell_number]
      if code_cell != nil
        health_status = all_health&.dig(code_cell.id)
      end
      code_cell_number += 1
    else
      code_cell = nil
      health_status = nil
    end
    source = [*cell["source"]].join
    next if source.size < 5 && source.strip.empty?
  ==render partial: "cell", locals: { jn: jn, cell: cell, code_cell: code_cell, health_status: health_status, source: source }

// Generate pagination bar
-if cells.respond_to? :total_pages
  nav.center id="notebookCellPagination" aria-label="Notebook contents pagination. View the other cells."
    ==will_paginate cells, renderer: BootstrapPagination::Rails
    -if jn["cells"].length > 20
      div
        a id="viewAsFullPage" href="#{notebook_path(@notebook) + '?view=full'}" title="View entire notebook instead" tabindex="-1"
          button.btn.btn-primary
            | View Full Notebook
            span.sr-only #{" instead"}
